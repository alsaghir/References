/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package worker;


import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.listener.PatternTopic;
import org.springframework.data.redis.listener.RedisMessageListenerContainer;
import org.springframework.data.redis.serializer.GenericToStringSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CountDownLatch;

@RequiredArgsConstructor
@Slf4j
@SpringBootApplication
public class App {
    private final StringRedisTemplate rs;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public static void main(String[] args) {
        SpringApplication.run(App.class, args);
    }

    @Bean
    RedisMessageListenerContainer keyExpirationListenerContainer(RedisConnectionFactory connectionFactory) {

        RedisMessageListenerContainer listenerContainer = new RedisMessageListenerContainer();
        listenerContainer.setConnectionFactory(connectionFactory);

        listenerContainer.addMessageListener((message, pattern) -> {
            log.info(new String(message.getChannel(), StandardCharsets.UTF_8));
            log.info(new String(message.getBody(), StandardCharsets.UTF_8));

            try {
                String yesVotes = objectMapper.readTree(message.getBody()).get("yes").asText();
                String noVotes = objectMapper.readTree(message.getBody()).get("no").asText();

                rs.opsForHash().put("yes",
                        "yes",
                        yesVotes);

                rs.opsForHash().put("no",
                        "no",
                        noVotes);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }, new PatternTopic("insert"));

        return listenerContainer;
    }

    @Bean
    CountDownLatch latch() {
        CountDownLatch latch = new CountDownLatch(1);
        new Thread() {
            @Override
            @SneakyThrows(InterruptedException.class)
            public synchronized void run() {
                //Hang this thread until counted down
                latch.await();
            }
        }.start();
        return latch;
    }

}
